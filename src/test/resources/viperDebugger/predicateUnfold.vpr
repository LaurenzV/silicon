field val: Int

predicate greater0(i : Int, n : Ref)
{
    acc(n.val) && (i >= 0? n.val == 4 : n.val == 5)
}

predicate impl(n: Ref, i: Int)
{
    n != null ==> i >= 0
}

method my_unfold(i: Int, n : Ref)
    requires greater0(i, n)
    ensures acc(n.val)
    ensures n.val >= 4 && n.val <= 5
{
    unfold greater0(i, n)
    assert n.val <= 3
}


method unfold_impl(i: Int, n : Ref)
    requires impl(n, i)
    requires n != null
{
    unfold impl(n, i)
    assert i >= 0
}